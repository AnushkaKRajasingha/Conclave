{
    "docs": [
        {
            "location": "/",
            "text": "CIMembership Official Documentation\n\n\nWelcome to the documentation for this application: to fully enjoy your product some knowledge of PHP and\nCodeIgniter, JavaScript and CSS are advised. You can always hire me for all your custom needs.\n\n\nWriting manuals takes time.\n This place will definitely improve over time.\n\n\nOverview\n\n\n\n    \nAbout\n\n    \nGetting Support\n\n    \nFeatures\n\n    \nApplication Structure\n\n    \nVendor Plugins\n\n    \nChangelog for CIMembership version 3.2.1\n\n    \nChangelog for CIMembership version 3.2.0\n\n\n\n\nConfiguration files\n\n\n\n    \nAutoload\n\n    \nConfig\n\n    \nConstants\n\n    \nDatabase\n\n    \nRoutes\n\n    \n.htaccess file\n\n\n\n\nInstallation\n\n\n\n    \nSystem Requirements\n\n    \nMigrating From Version 3.1.3\n\n    \nFresh Installation\n\n    \nUsing PDO\n\n\n\n\nCore Modules\n\n\n\n    \nadminpanel\n\n    \nauth\n\n    \nhome\n\n    \nmembership\n\n    \nutils\n\n    \npage_layouts\n\n\n\n\nConfiguring Social Login\n\n\n\n    \nSetting the providers\n\n    \nStep-by-step guides\n\n    \nFacebook\n\n    \nGoogle\n\n    \nTwitter\n\n    \nGithub\n\n    \nLinkedIn\n\n    \nDevelopment vs Production\n\n\n\n\nRole and Permissions\n\n\n\n    \nWhat are roles?\n\n    \nWhat are permissions?\n\n    \nHow do we use them?\n\n    \nChecking permissions\n\n    \nChecking roles\n\n    \nMenu\n\n    \nFuture ideas\n\n\n\n\nCoding tips\n\n\n\n    \nI want to edit/change this controller, view, model, etc\n\n    \nManaging persistent session data\n\n    \nDatabase\n\n    \nCustom libraries and vendor code\n\n    \nCreating modules\n\n\n\n\nTheming and Layouts\n\n\n\n    \nThe default controller\n\n    \nCustom 404 page\n\n    \nKeeping it DRY\n\n    \nBootstrap, LESS and Compiling\n\n    \nManaging Layouts\n\n    \nLoading Custom Data With set_css() and set_js()\n\n    \nSetting metadata\n\n    \nCreating A Custom Theme",
            "title": "CIMembership Official Documentation"
        },
        {
            "location": "/#cimembership-official-documentation",
            "text": "Welcome to the documentation for this application: to fully enjoy your product some knowledge of PHP and\nCodeIgniter, JavaScript and CSS are advised. You can always hire me for all your custom needs.  Writing manuals takes time.  This place will definitely improve over time.",
            "title": "CIMembership Official Documentation"
        },
        {
            "location": "/#overview",
            "text": "About \n     Getting Support \n     Features \n     Application Structure \n     Vendor Plugins \n     Changelog for CIMembership version 3.2.1 \n     Changelog for CIMembership version 3.2.0",
            "title": "Overview"
        },
        {
            "location": "/#configuration-files",
            "text": "Autoload \n     Config \n     Constants \n     Database \n     Routes \n     .htaccess file",
            "title": "Configuration files"
        },
        {
            "location": "/#installation",
            "text": "System Requirements \n     Migrating From Version 3.1.3 \n     Fresh Installation \n     Using PDO",
            "title": "Installation"
        },
        {
            "location": "/#core-modules",
            "text": "adminpanel \n     auth \n     home \n     membership \n     utils \n     page_layouts",
            "title": "Core Modules"
        },
        {
            "location": "/#configuring-social-login",
            "text": "Setting the providers \n     Step-by-step guides \n     Facebook \n     Google \n     Twitter \n     Github \n     LinkedIn \n     Development vs Production",
            "title": "Configuring Social Login"
        },
        {
            "location": "/#role-and-permissions",
            "text": "What are roles? \n     What are permissions? \n     How do we use them? \n     Checking permissions \n     Checking roles \n     Menu \n     Future ideas",
            "title": "Role and Permissions"
        },
        {
            "location": "/#coding-tips",
            "text": "I want to edit/change this controller, view, model, etc \n     Managing persistent session data \n     Database \n     Custom libraries and vendor code \n     Creating modules",
            "title": "Coding tips"
        },
        {
            "location": "/#theming-and-layouts",
            "text": "The default controller \n     Custom 404 page \n     Keeping it DRY \n     Bootstrap, LESS and Compiling \n     Managing Layouts \n     Loading Custom Data With set_css() and set_js() \n     Setting metadata \n     Creating A Custom Theme",
            "title": "Theming and Layouts"
        },
        {
            "location": "/overview/",
            "text": "CIMembership Official Documentation\n\n\n\nAbout\n\n\nCIMembership is a CodeIgniter based login and backend application to use as a starter kit for new projects.\nThe login and registration system is completely taken care of: members can get authorization rapidly with\nsocial networks like Facebook and Google or create their own account manually.\n\n\nThe development is ongoing and improving. New features will continue to be added to the core application as well as\nnew modules that will be developed for this product.\n\n\nGetting Support\n\n\nYou can contact me personally through my \nCodeCanyon profile\n.\nThere is a form at the bottom right called \"Email rakinjakk\". I will get back to you asap!\n\n\nFeatures\n\n\n* System\n\n\n\n    \nPHP>=5.6\n\n    \nMySQL (5.1+)\n\n    \nHMVC modular design - classic MVC is still available\n\n    \nWorks with the lastest version of CodeIgniter\n\n    \nInstaller and migration wizard\n\n    \nXSS and CSRF protected\n\n\n\n\n* Membership\n\n\n\n    \nRegistration form\n\n    \nTwo-factor Authorization\n\n    \nSocial login and registration with The PHPLeague's excellent OAuth libraries\n\n    \nEmail verification\n\n    \nRemember login based on cookies\n\n    \nLogin from multiple IP addresses simultaneously\n\n    \nPrivate member page with configurable options\n\n    \nProfile image\n\n    \nOptional login with email address\n\n    \nModern and complex password generation\n\n    \nResend avtivation\n\n    \nRenew password\n\n    \nRetrieve username\n\n    \nClient-side validation with Parsley\n\n    \nGoogle ReCaptcha 2 (version 1 also available)\n\n\n\n\n* Backend\n\n\n\n    \nDashboard\n\n    \nMany site settings\n\n    \nSession clearing option\n\n    \nFull user management system\n\n    \nContact member option\n\n    \nOAuth provider setup\n\n    \nACL: unlimited roles and permissions (RBAC)\n\n    \nExport members and database\n\n    \nMultilevel and collapsable sidemenu\n\n\n\n\n* Theming\n\n\n\n    \nPowerful templating library\n\n    \nBootstrap based design built from scratch\n\n    \nFully responsive design\n\n    \nPre-built layouts: fixed header, boxed layout, fluid layout, ltr and rtl\n\n\n\n\nApplication Structure\n\n\n\n\nPlaces of interest:\n\n\n\n\napplication/modules where the PHP code resides for this application and where new code can be added.\n\n\napplication/views where new themes can be born.\n\n\nassets to keep track of all your minified or development css and vendor is great for keeping all JavaScript plugins\nin once place and easy to reuse.\n\n\nless for compiling which is explained in the \nmanual here\n.\n\n\n\n\n!!! PLEASE CHECK THE MANUAL FOR ALL INSTALL AND UPGRADE NEEDS\n\n!!! MAKE A BACKUP OF YOUR CURRENT DATE BEFORE UPGRADING\n\n\nVendor plugins\n\n\n\n\nWiredesignz HMVC\n\n\nBootbox\n\n\nBootstrap\n\n\nCookie-js\n\n\nDiceware\n\n\njQuery File Upload\n\n\nHTML Purifier\n\n\njQuery 2.2.4\n\n\nNavgoco menu (modified version)\n\n\nParsley.js\n\n\nSlimscroll\n\n\nTinyMCE\n\n\n\n\nChangelog for CIMembership version 3.2.1\n\n\nNote: as the system becomes more and more complex it is inevitable that new bugs arise.\nIt was time for another big bugfixing round, this version takes care of many open issues.\n\n\n\n\nUPDATED to CodeIgniter 3.1.3\n\n\nUPDATED to Font Awesome 4.7.0 and moved fonts to assets folder\n\n\nUPDATED jQuery File Upload\n\n\nUPDATED cookie-js\n\n\nUPDATED Parsley.js to version 2.7.0\n\n\n\nBUGFIX language in site settings, improving explanation here and there\n\n\nBUGFIX new notransition js class was not used in templates\n\n\nBUGFIX menu item backup & export\n\n\nBUGFIX social login would not remember cookie correctly resulting in incorrect logout. It was experimental and is now corrected and fully implemented (social login now acts like Facebook, always renewing cookie in the background).\n\n\nBUGFIX installer did not create user_cookie_part entry in database, causing issues with resetting passwords before logging in the first time when installation didnt complete for some reason.\n\n\nBUGFIX fixed DB password required in installer - not required anymore.\n\n\nBUGFIX installer failed to add DB setting data in some cases on WAMP.\n\n\nBUGFIX registration disabled message was not present in new language file for auth module resulting in an empty red box when registration was actually disabled\n\n\nBUGFIX profile image size was still hardcoded app.js - now using the setting 'picture_max_upload_size' from database\n\n\nBUGFIX fixed remember me at login, was broken because of the new login system (simultaneous logins from different IPs caused it to break)\n\n\nBUGFIX root admin account roles could be edited in member_detail resulting in an unpleasant no access error, effectively locking the admin account out.\n\n\nBUGFIX emailing backups was broken because of new usage of md5(uniqid()) to save files\n\n\nBUGFIX Site_Controller::$page did not work when page not found, effectively breaking the page not found page.\n\n\nBUGFIX Parsley button loading texts didn't work on pages where more than one form using the js-parlsey class was used.\n\n\nBUGFIX do not allow enabling of recaptcha without keys\n\n\nBUGFIX no access page load layout error\n\n\n\nIMPROVED Theming by adding a few protected variables that can be used to pre-define theming options for inheriting classes (look at Admin_controller.php for an example)\n\n\nIMPROVED adminpanel controllers with some missing translations\n\n\nIMPROVED removed commented code from login view - logging in with both username or email are fully tested and working\n\n\nIMPROVED cookies model query was simplified (related to bugfix)\n\n\nIMPROVED session processing with better helper and all login systems now use the same model (managing session data is much simpler now)\n\n\nIMPROVED list_members_action view was moved to adminpanel module views folder (from theme partials folder)\n\n\nIMPROVED removed z-index from .content in core.less line 390 as it could interfere with some Bootstrap modals\n\n\nIMPROVED uploading and saving of profile images: new library created that can be reused (currently used in profile and member_detail) so no more duplicate code.\n\n\nIMPROVED list_members with root admin star icon\n\n\nIMPROVED ban and deactivate: session data is now killed based on user ip address and user id, making sure they are logged out from the system after getting banned or deactivated.\n\n\nIMPROVED login error message for username or email to \"That username or email could not be found.\"\n\n\nIMPROVED language files\n\n\nIMPROVED dashboard a bit (more in next version)\n\n\nIMPROVED roles usage and error messages; deleting administrator role/permissions has been made impossible again like it was before (design decision)\n\n\nIMPROVED product title in header is hardcoded now as large titles would break the design. The title field in site settings is for SEO purposes in the first place.\n\n\nIMPROVED installer with autocomplete=\"off\" on username and email fields\n\n\nIMPROVED site settings SMTP password input field is now of type password\n\n\nIMPROVED login and social login controllers, simplified models and session creation\n\n\nIMPROVED adminpanel, auth and membership modules by adding their own config/routes.php file with a default controller defined. Changing the default controller\nin application/config/routes.php now has no more impact on these modules.\n\n\n\nREMOVED old Windows oauth library - using Microsoft.php now. \n\n\nREMOVED old tooltip leftovers from profile and member_detail views\n\n\nREMOVED old header-rtl file (using header_rtl partial)\n\n\nREMOVED utils/models/Set_cookies_model as Private_Controller is now using the login model\n\n\n\nADDED extra class on \n HTML tag in theme files. Can come in handy for styles that are specific to one page.\n\n\nADDED dropzone to profile image upload\n\n\nADDED New header dropdown for profile on top right navbar\n\n\n\n\nChangelog for CIMembership version 3.2.0\n\n\nThis is a mayor update: many things have improved!\n\n\n\n\nBUGFIX when setting the membership home page as default page a redirect loop occurred\n\n\nBUGFIX in remember me query\n\n\nBUGFIX social login issues due to oauth update (see below (no more unreliable flashdata, now passing data with hidden input fields)\n\n\nBUGFIX list members search wrong redirect on form errors\n\n\nBUGFIX when minimizing menu in rtl design the top menu items shifted to the left\n\n\nBUGFIX logout button on menu was visible during accordion menu transitions on fixed designs\n\n\nBUGFIX favicons on public layout\n\n\nBUGFIX the sometimes buggy permission administration page (some error messages were missing because of transactions)\n\n\nBUGFIX clicking the checkbox in list members didn't work anymore.\n\n\n\nUPDATED to CodeIgniter 3.1.2\n\n\nUPDATED OAuth library from ThePHPLeague\n\n\nUPDATED Gargron upload code\n\n\nUPDATED jquery.file-upload.js\n\n\nUPDATED jQuery to 2.2.4\n\n\nUPDATED to Bootstrap 3.3.7\n\n\nUPDATED manual\n\n\n\nADDED missing translations for list_members_action and send_message \n\n\nADDED profile pic manipulation to adminpanel member detail\n\n\nADDED login now possible with email address (new option in site settings)\n\n\nADDED new helper for session setup at login\n\n\n\nIMPROVED password algorithm now using built-in methods from PHP>=5.5\n\n\nIMPROVED security on image upload with better CSRF protection\n\n\nIMPROVED language entries - now split up for each module where needed\n\n\nIMPROVED Parsley JS on forms\n\n\nIMPROVED installer, .htaccess doesn't need rewrite rule anymore; server requirements are now visible\n\n\nIMPROVED profile page layout\n\n\nIMPROVED default profile image name called \"profile\" as it is now set in a private class variable (might go to site settings later)\n\n\nIMPROVED the upload picture maximum file size which is now saved as a setting in the database\n\n\nIMPROVED the login cookies storage which is now based on IP address and stored in a separate table\n\n\nIMPROVED references in database: removing a parent now cascades through other tables to remove children. Affected tables: user_role, user_cookie_part, role_permission\n\n\nIMPROVED roles: admin roles can be saved now (admin still can't be deleted though)\n\n\nIMPROVED setting database table: now a setting for each row in stead of one row for all settings\n\n\nIMPROVED cosmetics here and there, small visual mistakes that were encountered by the community\n\n\nIMPROVED usernames can now be 24 characters long and passwords can get up to 255\n\n\nIMPROVED checks for when the site is disabled: the Private_Controller now checks and redirects accordingly. No more code needed elsewhere.\n\n\n\nMOVED DB_PREFIX constant from constants.php to database.php, accommodating the improved installer\n\n\nMOVED cim version to table setting\n\n\n\nRENAMED users table to user for complete naming conventions conformity\n\n\n\nREMOVED deprecated native autoload from config\n\n\nREMOVED password requirement for profile change because social login users don't have a password\n\n\nREMOVED narrow CSS margins for .row and .col-* inside .content because it was too narrow\n\n\nREMOVED session variable \"logged_in\" as its job can be done by \"user_id\"\n\n\nREMOVED deprecated oauth2_helper\n\n\nREMOVED constants ADMINISTRATOR from constants.php - replaced with database setting called root_admin_username.\n\n\nREMOVED utils/Intall\n\n\n\nDROPPED support for IE8",
            "title": "Overview"
        },
        {
            "location": "/overview/#about",
            "text": "CIMembership is a CodeIgniter based login and backend application to use as a starter kit for new projects.\nThe login and registration system is completely taken care of: members can get authorization rapidly with\nsocial networks like Facebook and Google or create their own account manually.  The development is ongoing and improving. New features will continue to be added to the core application as well as\nnew modules that will be developed for this product.",
            "title": "About"
        },
        {
            "location": "/overview/#getting-support",
            "text": "You can contact me personally through my  CodeCanyon profile .\nThere is a form at the bottom right called \"Email rakinjakk\". I will get back to you asap!",
            "title": "Getting Support"
        },
        {
            "location": "/overview/#features",
            "text": "* System  \n     PHP>=5.6 \n     MySQL (5.1+) \n     HMVC modular design - classic MVC is still available \n     Works with the lastest version of CodeIgniter \n     Installer and migration wizard \n     XSS and CSRF protected   * Membership  \n     Registration form \n     Two-factor Authorization \n     Social login and registration with The PHPLeague's excellent OAuth libraries \n     Email verification \n     Remember login based on cookies \n     Login from multiple IP addresses simultaneously \n     Private member page with configurable options \n     Profile image \n     Optional login with email address \n     Modern and complex password generation \n     Resend avtivation \n     Renew password \n     Retrieve username \n     Client-side validation with Parsley \n     Google ReCaptcha 2 (version 1 also available)   * Backend  \n     Dashboard \n     Many site settings \n     Session clearing option \n     Full user management system \n     Contact member option \n     OAuth provider setup \n     ACL: unlimited roles and permissions (RBAC) \n     Export members and database \n     Multilevel and collapsable sidemenu   * Theming  \n     Powerful templating library \n     Bootstrap based design built from scratch \n     Fully responsive design \n     Pre-built layouts: fixed header, boxed layout, fluid layout, ltr and rtl",
            "title": "Features"
        },
        {
            "location": "/overview/#application-structure",
            "text": "Places of interest:   application/modules where the PHP code resides for this application and where new code can be added.  application/views where new themes can be born.  assets to keep track of all your minified or development css and vendor is great for keeping all JavaScript plugins\nin once place and easy to reuse.  less for compiling which is explained in the  manual here .   !!! PLEASE CHECK THE MANUAL FOR ALL INSTALL AND UPGRADE NEEDS \n!!! MAKE A BACKUP OF YOUR CURRENT DATE BEFORE UPGRADING",
            "title": "Application Structure"
        },
        {
            "location": "/overview/#vendor-plugins",
            "text": "Wiredesignz HMVC  Bootbox  Bootstrap  Cookie-js  Diceware  jQuery File Upload  HTML Purifier  jQuery 2.2.4  Navgoco menu (modified version)  Parsley.js  Slimscroll  TinyMCE",
            "title": "Vendor plugins"
        },
        {
            "location": "/overview/#changelog-for-cimembership-version-321",
            "text": "Note: as the system becomes more and more complex it is inevitable that new bugs arise.\nIt was time for another big bugfixing round, this version takes care of many open issues.   UPDATED to CodeIgniter 3.1.3  UPDATED to Font Awesome 4.7.0 and moved fonts to assets folder  UPDATED jQuery File Upload  UPDATED cookie-js  UPDATED Parsley.js to version 2.7.0  BUGFIX language in site settings, improving explanation here and there  BUGFIX new notransition js class was not used in templates  BUGFIX menu item backup & export  BUGFIX social login would not remember cookie correctly resulting in incorrect logout. It was experimental and is now corrected and fully implemented (social login now acts like Facebook, always renewing cookie in the background).  BUGFIX installer did not create user_cookie_part entry in database, causing issues with resetting passwords before logging in the first time when installation didnt complete for some reason.  BUGFIX fixed DB password required in installer - not required anymore.  BUGFIX installer failed to add DB setting data in some cases on WAMP.  BUGFIX registration disabled message was not present in new language file for auth module resulting in an empty red box when registration was actually disabled  BUGFIX profile image size was still hardcoded app.js - now using the setting 'picture_max_upload_size' from database  BUGFIX fixed remember me at login, was broken because of the new login system (simultaneous logins from different IPs caused it to break)  BUGFIX root admin account roles could be edited in member_detail resulting in an unpleasant no access error, effectively locking the admin account out.  BUGFIX emailing backups was broken because of new usage of md5(uniqid()) to save files  BUGFIX Site_Controller::$page did not work when page not found, effectively breaking the page not found page.  BUGFIX Parsley button loading texts didn't work on pages where more than one form using the js-parlsey class was used.  BUGFIX do not allow enabling of recaptcha without keys  BUGFIX no access page load layout error  IMPROVED Theming by adding a few protected variables that can be used to pre-define theming options for inheriting classes (look at Admin_controller.php for an example)  IMPROVED adminpanel controllers with some missing translations  IMPROVED removed commented code from login view - logging in with both username or email are fully tested and working  IMPROVED cookies model query was simplified (related to bugfix)  IMPROVED session processing with better helper and all login systems now use the same model (managing session data is much simpler now)  IMPROVED list_members_action view was moved to adminpanel module views folder (from theme partials folder)  IMPROVED removed z-index from .content in core.less line 390 as it could interfere with some Bootstrap modals  IMPROVED uploading and saving of profile images: new library created that can be reused (currently used in profile and member_detail) so no more duplicate code.  IMPROVED list_members with root admin star icon  IMPROVED ban and deactivate: session data is now killed based on user ip address and user id, making sure they are logged out from the system after getting banned or deactivated.  IMPROVED login error message for username or email to \"That username or email could not be found.\"  IMPROVED language files  IMPROVED dashboard a bit (more in next version)  IMPROVED roles usage and error messages; deleting administrator role/permissions has been made impossible again like it was before (design decision)  IMPROVED product title in header is hardcoded now as large titles would break the design. The title field in site settings is for SEO purposes in the first place.  IMPROVED installer with autocomplete=\"off\" on username and email fields  IMPROVED site settings SMTP password input field is now of type password  IMPROVED login and social login controllers, simplified models and session creation  IMPROVED adminpanel, auth and membership modules by adding their own config/routes.php file with a default controller defined. Changing the default controller\nin application/config/routes.php now has no more impact on these modules.  REMOVED old Windows oauth library - using Microsoft.php now.   REMOVED old tooltip leftovers from profile and member_detail views  REMOVED old header-rtl file (using header_rtl partial)  REMOVED utils/models/Set_cookies_model as Private_Controller is now using the login model  ADDED extra class on   HTML tag in theme files. Can come in handy for styles that are specific to one page.  ADDED dropzone to profile image upload  ADDED New header dropdown for profile on top right navbar",
            "title": "Changelog for CIMembership version 3.2.1"
        },
        {
            "location": "/overview/#changelog-for-cimembership-version-320",
            "text": "This is a mayor update: many things have improved!   BUGFIX when setting the membership home page as default page a redirect loop occurred  BUGFIX in remember me query  BUGFIX social login issues due to oauth update (see below (no more unreliable flashdata, now passing data with hidden input fields)  BUGFIX list members search wrong redirect on form errors  BUGFIX when minimizing menu in rtl design the top menu items shifted to the left  BUGFIX logout button on menu was visible during accordion menu transitions on fixed designs  BUGFIX favicons on public layout  BUGFIX the sometimes buggy permission administration page (some error messages were missing because of transactions)  BUGFIX clicking the checkbox in list members didn't work anymore.  UPDATED to CodeIgniter 3.1.2  UPDATED OAuth library from ThePHPLeague  UPDATED Gargron upload code  UPDATED jquery.file-upload.js  UPDATED jQuery to 2.2.4  UPDATED to Bootstrap 3.3.7  UPDATED manual  ADDED missing translations for list_members_action and send_message   ADDED profile pic manipulation to adminpanel member detail  ADDED login now possible with email address (new option in site settings)  ADDED new helper for session setup at login  IMPROVED password algorithm now using built-in methods from PHP>=5.5  IMPROVED security on image upload with better CSRF protection  IMPROVED language entries - now split up for each module where needed  IMPROVED Parsley JS on forms  IMPROVED installer, .htaccess doesn't need rewrite rule anymore; server requirements are now visible  IMPROVED profile page layout  IMPROVED default profile image name called \"profile\" as it is now set in a private class variable (might go to site settings later)  IMPROVED the upload picture maximum file size which is now saved as a setting in the database  IMPROVED the login cookies storage which is now based on IP address and stored in a separate table  IMPROVED references in database: removing a parent now cascades through other tables to remove children. Affected tables: user_role, user_cookie_part, role_permission  IMPROVED roles: admin roles can be saved now (admin still can't be deleted though)  IMPROVED setting database table: now a setting for each row in stead of one row for all settings  IMPROVED cosmetics here and there, small visual mistakes that were encountered by the community  IMPROVED usernames can now be 24 characters long and passwords can get up to 255  IMPROVED checks for when the site is disabled: the Private_Controller now checks and redirects accordingly. No more code needed elsewhere.  MOVED DB_PREFIX constant from constants.php to database.php, accommodating the improved installer  MOVED cim version to table setting  RENAMED users table to user for complete naming conventions conformity  REMOVED deprecated native autoload from config  REMOVED password requirement for profile change because social login users don't have a password  REMOVED narrow CSS margins for .row and .col-* inside .content because it was too narrow  REMOVED session variable \"logged_in\" as its job can be done by \"user_id\"  REMOVED deprecated oauth2_helper  REMOVED constants ADMINISTRATOR from constants.php - replaced with database setting called root_admin_username.  REMOVED utils/Intall  DROPPED support for IE8",
            "title": "Changelog for CIMembership version 3.2.0"
        },
        {
            "location": "/config/",
            "text": "Configuration files\n\n\n\nAn overview of the important configuration settings for when you need to change your basic setup.\n\n\nAutoload\n\n\napplication/config/autoload.php\n\n\n\nWe are autoloading these 3 on LINE 63:\n\n\n$autoload['libraries'] = array('database', 'session', 'template');\n\n\n\nWe autoload out settings model at the bottom of the file:\n\n\n$autoload['model'] = array('utils/settings_model');\n\n\nConfig\n\n\napplication/config/config.php\n\n\n$config['base_url']\n on LINE 21: is set dynamically so when the application is moved this doesn't need to be changed.\n\n\nThe following are set automatically by the installer:\n\n\n$config['encryption_key']\n\non LINE 309 - this key is used by the encryption class. We use this key to encrypt and decrypt email data.\n\n\n$config['sess_cookie_name']\n\non LINE 360 - must be a unique value for example when running multiple instances of this application.\n\n\n$config['cookie_domain']\n\non LINE 383 - by default is set to site-wide cookies on your domain - not needed for localhost setups.\n\n\nExtra feature: turning off CSRF regeneration.\n\nLINE 437-446 - add controller/method to the \n$no_regen\n array if you want to turn of regeneration for this cookie. This is sometimes\nneeded for JavaScript-heavy plugins where building in the CSRF regeneration isn't recommended. The problem with AJAX and CSRF is that \nwhen working with multiple tabs on the same application the token will differ which causes errors. One solution would be to disable CSRF\nfor those methods but this way you can just disable the regeneration and the tokens will continue to work. \n\n\nConstants\n\n\napplication/config/constants.php\n\n\nThe two custom CI Membership settings here are set by the installer:\n\n\n\n\nThe \nADMINISTRATOR\n global constant is used for the root admin account, the only admin account that can never be deleted.\n\n\nSITE_KEY\n is currently used as a secret salt to help create the renew_password token.\n\n\n\n\nDatabase\n\n\napplication/config/database.php\n\n\nThere is nothing out of the ordinary here, our installer sets all the values.\nYou can set PDO by adding a dsn and changing \ndbdriver\n to pdo.\n\n\nThe constant \nDB_PREFIX\n is added for CI Membership and should be used in all queries for example:\n\n\n$this->db->from(DB_PREFIX .'user u');\n\n\n\nRoutes\n\n\napplication/config/routes.php\n\n\nThere are a few custom routes to shorten the auth pages.\n\n\nDefault controller = home:\n\n\n$route['default_controller'] = 'home';\n\n\n\n.htaccess file\n\n\nTakes care of removing the index.php from the url and has some examples for redirecting to https and removing www: both\nthese operations will improve SEO and usability.\n\nFor Nginx you need a separate file, for a great example please\nvisit \nhttps://www.nginx.com/resources/wiki/start/topics/recipes/codeigniter/\n.",
            "title": "Configuration Files"
        },
        {
            "location": "/config/#autoload",
            "text": "application/config/autoload.php  \nWe are autoloading these 3 on LINE 63:  $autoload['libraries'] = array('database', 'session', 'template');  \nWe autoload out settings model at the bottom of the file:  $autoload['model'] = array('utils/settings_model');",
            "title": "Autoload"
        },
        {
            "location": "/config/#config",
            "text": "application/config/config.php  $config['base_url']  on LINE 21: is set dynamically so when the application is moved this doesn't need to be changed.  The following are set automatically by the installer:  $config['encryption_key'] \non LINE 309 - this key is used by the encryption class. We use this key to encrypt and decrypt email data.  $config['sess_cookie_name'] \non LINE 360 - must be a unique value for example when running multiple instances of this application.  $config['cookie_domain'] \non LINE 383 - by default is set to site-wide cookies on your domain - not needed for localhost setups.  Extra feature: turning off CSRF regeneration. \nLINE 437-446 - add controller/method to the  $no_regen  array if you want to turn of regeneration for this cookie. This is sometimes\nneeded for JavaScript-heavy plugins where building in the CSRF regeneration isn't recommended. The problem with AJAX and CSRF is that \nwhen working with multiple tabs on the same application the token will differ which causes errors. One solution would be to disable CSRF\nfor those methods but this way you can just disable the regeneration and the tokens will continue to work.",
            "title": "Config"
        },
        {
            "location": "/config/#constants",
            "text": "application/config/constants.php  The two custom CI Membership settings here are set by the installer:   The  ADMINISTRATOR  global constant is used for the root admin account, the only admin account that can never be deleted.  SITE_KEY  is currently used as a secret salt to help create the renew_password token.",
            "title": "Constants"
        },
        {
            "location": "/config/#database",
            "text": "application/config/database.php  There is nothing out of the ordinary here, our installer sets all the values.\nYou can set PDO by adding a dsn and changing  dbdriver  to pdo.  The constant  DB_PREFIX  is added for CI Membership and should be used in all queries for example:  $this->db->from(DB_PREFIX .'user u');",
            "title": "Database"
        },
        {
            "location": "/config/#routes",
            "text": "application/config/routes.php  There are a few custom routes to shorten the auth pages.  Default controller = home:  $route['default_controller'] = 'home';",
            "title": "Routes"
        },
        {
            "location": "/config/#htaccess-file",
            "text": "Takes care of removing the index.php from the url and has some examples for redirecting to https and removing www: both\nthese operations will improve SEO and usability. \nFor Nginx you need a separate file, for a great example please\nvisit  https://www.nginx.com/resources/wiki/start/topics/recipes/codeigniter/ .",
            "title": ".htaccess file"
        },
        {
            "location": "/installation/",
            "text": "Installation\n\n\n\nSystem Requirements\n\n\n\n\nPHP >= 5.6\n\n  PHP 5.5 isn't officially supported anymore so unless you're running on CloudLinux you're in danger. Certain libraries require a modern\n  version of PHP and CodeIgniter themselves recommend at least 5.6.\n\n\nMySQL 5.6 or MariaDB 10.x with mysqli at a minimum, pdo also works with minor config changes\n\n\ncURL\n\n\nMcrypt\n\n\nfinfo_file (might not be neabled by default on PHP 5.6)\n\n\nOpenSSL\n\n\n\n\nMigrating From Version 3.2.0 to latest version\n\n\n\n\nBack up\n your complete project - we will need it later!\n\n\nUnzip\n the package. In your project replace (delete current code and upload) the default code with the contents of ci_membership.\n\n\nCopy your data\n from backup application/config/config.php\n\n\nCopy your SITE_KEY\n from backup application/config/constants.php\n\n\nSet a profile picture\n for the root administrator account.\n\n\nRun the migration tool\n on https://yourwebsite.com/migration\n\n\n\n\nConfig files will be added to the database in a next version, making the install procedure even better.\n\n\nMigrating From Version 3.1.3 to latest version\n\n\nOur new migration script will upgrade your \nversion 3.1.3 to 3.2.1\n. Please do not use this\nscript on older versions as it will certainly break your database.\n\n\n\n    \nBack up your project!!!\n We need it later.\n\n    \nUpload the migration folder\n to your web hosting: this folder can be found in the root of the application folder;\n\n    \nRun the migration script\n on http://example.com/migration replacing example.com with your installation location;\n\n    \nReplace the application files\n on your hosting platform. Please do not just upload the files as there are\n    many changes between versions in terms of file structure.\n\n    \nCopy from backup\n the values in application/config from both config.php and constants.php to the new files. The config files have changed so\n    this is manual work: in config.php please verify \n$config['encryption_key']\n, \n$config['sess_cookie_name']\n\n    and \n$config['cookie_domain']\n; in constants.php check the \nSITE_KEY\n.\n\n    \nCopy from backup\n in application/config/database.php: put back your settings and upload.\n\n    \nThe password system has changed. All users need to request new passwords! Idem for administrator account.\n\n\n\n\n\nIn case of problems please report them by \ncontacting us\n.\n\n\nFresh Installation\n\n\n\n\nUpload\n the application files;\n\n\nRun\n the installer at http://example.com/installer;\n\n\nBe sure to generate secure passwords! \nread more here\n;\n\n\nLog in and go to site settings\n to configure your site's preferences. Enable ReCaptcha 2 for added security.\n\n\n\n\nduring installation you will be asked to create a root administrator account. This is the unique admin account that will never be able to\nget deleted and is used as a fallback for when things go wrong with created accounts.\n\n\nOptional: you can use the included .htaccess file to configure redirects to non-www domains. This file is needed for CI to remove the \nindex.php from the URL so please do not remove it.\n\n\nRewriteCond $1 !^(index\\.php|resources|robots\\.txt)\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php?/$1 [L,QSA]\n\n\n\nUsing PDO\n\n\nOff course CodeIgniter supports this, just add a dsn in \napplication/config/database.php\n\n\n$db['default'] = array(\n    'dsn'   => 'mysql:host=database_host;dbname=database_name',\n    ...",
            "title": "Installation"
        },
        {
            "location": "/installation/#system-requirements",
            "text": "PHP >= 5.6 \n  PHP 5.5 isn't officially supported anymore so unless you're running on CloudLinux you're in danger. Certain libraries require a modern\n  version of PHP and CodeIgniter themselves recommend at least 5.6.  MySQL 5.6 or MariaDB 10.x with mysqli at a minimum, pdo also works with minor config changes  cURL  Mcrypt  finfo_file (might not be neabled by default on PHP 5.6)  OpenSSL",
            "title": "System Requirements"
        },
        {
            "location": "/installation/#migrating-from-version-320-to-latest-version",
            "text": "Back up  your complete project - we will need it later!  Unzip  the package. In your project replace (delete current code and upload) the default code with the contents of ci_membership.  Copy your data  from backup application/config/config.php  Copy your SITE_KEY  from backup application/config/constants.php  Set a profile picture  for the root administrator account.  Run the migration tool  on https://yourwebsite.com/migration   Config files will be added to the database in a next version, making the install procedure even better.",
            "title": "Migrating From Version 3.2.0 to latest version"
        },
        {
            "location": "/installation/#migrating-from-version-313-to-latest-version",
            "text": "Our new migration script will upgrade your  version 3.1.3 to 3.2.1 . Please do not use this\nscript on older versions as it will certainly break your database.  \n     Back up your project!!!  We need it later. \n     Upload the migration folder  to your web hosting: this folder can be found in the root of the application folder; \n     Run the migration script  on http://example.com/migration replacing example.com with your installation location; \n     Replace the application files  on your hosting platform. Please do not just upload the files as there are\n    many changes between versions in terms of file structure. \n     Copy from backup  the values in application/config from both config.php and constants.php to the new files. The config files have changed so\n    this is manual work: in config.php please verify  $config['encryption_key'] ,  $config['sess_cookie_name'] \n    and  $config['cookie_domain'] ; in constants.php check the  SITE_KEY . \n     Copy from backup  in application/config/database.php: put back your settings and upload. \n     The password system has changed. All users need to request new passwords! Idem for administrator account.   In case of problems please report them by  contacting us .",
            "title": "Migrating From Version 3.1.3 to latest version"
        },
        {
            "location": "/installation/#fresh-installation",
            "text": "Upload  the application files;  Run  the installer at http://example.com/installer;  Be sure to generate secure passwords!  read more here ;  Log in and go to site settings  to configure your site's preferences. Enable ReCaptcha 2 for added security.   during installation you will be asked to create a root administrator account. This is the unique admin account that will never be able to\nget deleted and is used as a fallback for when things go wrong with created accounts.  Optional: you can use the included .htaccess file to configure redirects to non-www domains. This file is needed for CI to remove the \nindex.php from the URL so please do not remove it.  RewriteCond $1 !^(index\\.php|resources|robots\\.txt)\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php?/$1 [L,QSA]",
            "title": "Fresh Installation"
        },
        {
            "location": "/installation/#using-pdo",
            "text": "Off course CodeIgniter supports this, just add a dsn in  application/config/database.php  $db['default'] = array(\n    'dsn'   => 'mysql:host=database_host;dbname=database_name',\n    ...",
            "title": "Using PDO"
        },
        {
            "location": "/core_modules/",
            "text": "Core Modules\n\n\n\nThis application uses \nHMVC from Wiredesignz\n for a\nmore modular approach to our coding needs. This means that all our code resides inside \napplication/modules\n and some sort of separation becomes\npossible. Adding new functionality means adding a new module with the same folder structure.\n\nUnfortunately we still can't include our assets (images, css, js) in these module folders because this would mean an insecurity so\nif you want to separate your assets you can create separate folders in \nassets\n. For this application however I opted for a vendor folder instead:\nassets are probably shared between modules at some point and keeping them in their vendor-specific folder allows for easy referencing.\nYou can still use the regular MVC design pattern CodeIgniter uses, it's just that HMVC has many advantages over regular MVC in CodeIgniter that\nit is highly advised to use it.\n\n\nadminpanel\n\n\nThe backend module. All core management functionality has been collected into this module:\n- site settings\n- admin dashboard\n- member management\n- OAuth provider setup\n- roles and permissions\n\n\nauth\n\n\nTakes care of all authentication aspects of the application be it social or regular login and registration.\n\n\n\n\nlogin\n\n\nregistration\n\n\nsocial login and signup\n\n\nauthentication recovery in case of lost data\n\n\n\n\nhome\n\n\nThe default public page needs a controller just like any other page. The home controller has been designated as default controller for all\nmodules. There are no models involved in this module, just a simple controller. This can easily be used as a base to start from.\n\n\nmembership\n\n\nFor all the pages that are related to the member and their data. Currently we have:\n\n\n\n\ndashboard\n\n\nprofile\n\n\n\n\nIn the future a public profile page will also be added and this is just one example of what you can expect in new releases.\n\n\nutils\n\n\nContains various code that doesn't really need it's own module.\n\n\ncontrollers:\n\n\n\n\ninstall\n\n\npage not found\n\n\nsite offline\n\n\n\n\nmodules:\n\n\n\n\nRBAC for access control (see \nroles and permissions\n)\n\n\nset cookies model (loads data when unique_token cookie is found for remembering logins)\n\n\nsettings (autoloaded, writes config to file)\n\n\n\n\npage_layouts\n\n\nJust a generic folder containing the different controllers for our set of adminpanel layouts. We have six controllers, one for each layout option.\nCan be removed as they are not actively used anywhere, these are just examples for how to quickly set up a differing layout.",
            "title": "Core Modules"
        },
        {
            "location": "/core_modules/#adminpanel",
            "text": "The backend module. All core management functionality has been collected into this module:\n- site settings\n- admin dashboard\n- member management\n- OAuth provider setup\n- roles and permissions",
            "title": "adminpanel"
        },
        {
            "location": "/core_modules/#auth",
            "text": "Takes care of all authentication aspects of the application be it social or regular login and registration.   login  registration  social login and signup  authentication recovery in case of lost data",
            "title": "auth"
        },
        {
            "location": "/core_modules/#home",
            "text": "The default public page needs a controller just like any other page. The home controller has been designated as default controller for all\nmodules. There are no models involved in this module, just a simple controller. This can easily be used as a base to start from.",
            "title": "home"
        },
        {
            "location": "/core_modules/#membership",
            "text": "For all the pages that are related to the member and their data. Currently we have:   dashboard  profile   In the future a public profile page will also be added and this is just one example of what you can expect in new releases.",
            "title": "membership"
        },
        {
            "location": "/core_modules/#utils",
            "text": "Contains various code that doesn't really need it's own module.  controllers:   install  page not found  site offline   modules:   RBAC for access control (see  roles and permissions )  set cookies model (loads data when unique_token cookie is found for remembering logins)  settings (autoloaded, writes config to file)",
            "title": "utils"
        },
        {
            "location": "/core_modules/#page_layouts",
            "text": "Just a generic folder containing the different controllers for our set of adminpanel layouts. We have six controllers, one for each layout option.\nCan be removed as they are not actively used anywhere, these are just examples for how to quickly set up a differing layout.",
            "title": "page_layouts"
        },
        {
            "location": "/social_login/",
            "text": "Configuring Social Login\n\n\n\n\n\nadding providers in admin panel\n\n\nexplanation for each active social network :FB, G+, Twitter, Linkedin, etc\n\n\nwith screenshots etc off course\n\n\n\n\nSetting the providers\n\n\nThe data from our providers will be saved in the database and can be configured via the adminpanel.\nThese providers - the leading social networks - offer an OAuth platform to developers and we use the plugin from\nThePHPLeague, maintained on Github, to offer a safe platform to communicate through.\n\n\nProviders can be added, remove, enabled and disabled through the adminpanel. You can also disable the social login\nvia the site settings page.\n\n\nAlmost al providers allow you to upload an application icon. This will not be explained separately for each provider \nas that would be redundant.\n\n\nCreating a new social provider is easy: Click on OAuth providers in adminpanel and then Add to see this form:\n\n\n\n\nSo you see it is very easy to add anything in there. Currently the system relies on a provider with First letter Capitalized.\nYour input will be automatically converted to this format so you don't have to worry about this.\n\n\n\n    \n The value of the oauth name field matters: it needs to correspond to the name of the library class in \n    \napplication/libraries/Oauth(1 or 2)/\n. Just use the file name, it's identical.\n\n\n\n\n\n    \n When you switch to https you need to change this in all the developer consoles. Https is going to get more\n    and more preference so it's important to start using one now. We have free SSL in our hosting packages.\n\n\n\n\n\n    \n All providers have \nrate limits\n which can be found in\n    their respective API consoles. Some providers offer solutions to these limits, each in their own way.\n\n\n\n\nStep-by-step guides\n\n\nEach provider has a different developer platform where OAuth needs to be configured. Some are easier than others\nbut all are subject to constant change. The manual might contain outdated images from time to time in between updates.\n\n\n\n    Wherever you encounter a usage of /dev/cim3/ in an example: this is my development folder. You don't need to use\n    it it just serves as an example because I'm using screen captures from there.\n\n\n\n\nFacebook\n\n\n\n    \nGo to the Facebook developer website and log in.\n\n    \nAt the right top go to My apps and click \nAdd A New App\n or click the green button that\n    tells you the same.\n\n    \nCreate an initial app with display name and contact email. Choose a category that suits best. Click on\n    Create App ID and confirm the security code.\n    \n\n\n\n\n\n\n\n\n    \nNow click on Get Started next to FaceBook login (first in the list).\n\n    \n\n        On the settings page we enter the \nValid OAuth redirect URIs:\n\n        use your domain (plus subfolders if any) with \nauth/oauth2/verify/Facebook\n\n    \n\n\n\n\n\n\n\n\n    \n\n        In the menu go to \nSettings - Basic\n. Here we will find the app ID and secret which we need to use\n        to create a new provider in our adminpanel.\n    \n\n    \n\n        Click on Show and copy the secret, then go to adminpanel - OAuth Providers and add a new social login option\n        as explained above.\n    \n\n    \n\n        We continue with the App Domains: to be sure just put in both domains with and without www.\n    \n\n    \n\n        Click on Add Platform and choose Website - I add just the root domain here and it seems to work fine.\n    \n\n\n\n\n\n\n\nTo \nmake your app available\n go to App Review in the menu and set it to live here.\n\n\nGoogle\n\n\nYou can also find an alternative explanation \non the google website\n.\n\n\n\n    \nGo to \nGoogle Developer Console\n\n    \nClick the dropdown and select Create a new project. Choose a name for the project.\n\n    \nClick on Credentials in the menu en choose \"Create Credentials\" then select Oauth Client ID from the dropdown.\n\n    The following screen appears: \n\n\n\n\n\n\n\n\n\n\n    \nChoose a required name;\n\n    \nAdd the correct return url with yourdomain and then \nauth/oauth2/verify/Google\n as path.\n\n    \nYou will be asked to fill out the Consent screen:\n\n\n\n\n\n\n\n\n    \nWhen finished a popup will appear with the credential data. You can also consult this data by \n    clicking on Credentials in the left menu and then selecting your project.\n\n\n\n\n\n\n\nTwitter\n\n\n\n    \nGo to \nApplication Management\n and click on Create New App.\n\n    \nFill out the details:\n\n\n\n\n\n\n\n\n    \nWe arrive at the Details page where there's some data available from this app.\n\n    \nConsumer Key (API Key) and Consumer Secret (API Secret) can be grabbed from the Keys and Access Tokens page.\n\n\n\n\n\nREQUIRED: Adding permissions to grab the email address\n\n\n\nTo enable the email address in the callback data we need to go to Settings and enter a value for Privacy Policy URL and\nTerms of Service URL.\n\n\nRECOMMENDED: Allow application\n\n\n\nTo make sure we do not have to re-authenticate with Twitter every time we need to check the box that says\n\"Allow this application to be used to Sign in with Twitter\".\n\n\nFull example below:\n\n\n\n\nGithub\n\n\n\n    \nGo to \nYour Github Profile\n.\n\n    \nEnable your email address.\n\n    \nClick on OAuth applications in the left column down below.\n\n    \nRegister a new application.\n\n    \nFill out the details like always.\n\n    \nOnce finished you will immediately see the tokens to add to the adminpanel provider section.\n\n\n\n\n\n\n\nLinkedIn\n\n\n\n    \nGo to \nLinkedIn developer console\n.\n\n    \nClick Create Application. Linkedin requires some more information then others with a required\n    business email and phone number and also a logo.\n\n    \nRepeat the same steps from above but use the correct OAuth link: I think by now we get it but here it\n    is anyway: \nhttps://example.com/auth/oauth2/verify/LinkedIn\n.\n\n    \nYour keys can be found on the Authentication page. Check the \nr_emailaddress\n box there now.\n\n    \nSet the app to live in Settings.\n\n\n\n\n\n\n\n\n\n\n\nMicrosoft\n\n\n\n    \nGo to \nYour applications\n.\n\n    \nClick on Add An App, choose a name for your project.\n\n    \nYou are immediately presented with your Application Id:\n\n\n\n\n\n\n\n\n    \nGenerate a new password for this Application ID and copy it into CIMembership.\n\n    \nClick on Add Platform and add the correct redirect URL as shown above.\n\n    \nYou are immediately presented with your Application Id.\n\n\n\n\n\nPaypal\n\n\n\n    \nGo to \nPaypal Developer and log in\n.\n\n    \nPaypal has an excellent manual where we can easily get lost because it's so vast. It's nice to have but\n    it's also a bit annoying. We want the \"Log In With PayPal\" option and it can be found after clicking \n    Dashboard at the top right of the screen. There could be regional differences.\n\n    \nWe need to create new REST API credentials so click on that and choose an app name.\n\n    \nNow you will get client secret and id - grab them now and add a new provider via adminpanel.\n\n\n\n\n\n\n\n\n    \nYou can toggle between live and sandbox and the keys will be different. I use live for the demo and sandbox for my dev box.\n\n    \nYou can manage both sandbox and live in one account so that is a big plus. Thanks, Paypal. If you are going\n    live turn off the sandbox setting in the library. (application/libraries/Oauth1 or OAuth2). It is off by default though.\n\n\n\n\n\nStripe\n\n\n\n    \nIs a little different - their member control panel is complex.\n\n    \nGo to \nThe dashboard\n - if you are asked to initialize a few\n    things just go ahead.\n\n    \nClick on your name at the right top and choose Account Settings:\n\n\n\n\n\n\n\n\n    \nGo to API Key to know your app secret for both test and live.\n\n    \nStripe also offers us the possibility to manage both test and live environments in one application.\n\n    \nGo to Connect - Platform Settings and do the necessary as always. You will find your client_id here.\n\n\n\n\n\n\n\nDevelopment vs Production\n\n\nYou are probably going to set all this up two times when you need a permanent development environment like I do.\nYou can try to add multiple URLs and it will work for some providers but I prefer to keep them separate because the development\nenvironment needs to remain private. With Facebook you can disable live access to your apps but not all providers\nhave this option.\n\n\nOther\n\n\nMore providers will be added in the next version: VK, Microsoft, Steam, etc. will be tested thoroughly before\nmaking it public.",
            "title": "Configuring Social Login"
        },
        {
            "location": "/social_login/#setting-the-providers",
            "text": "The data from our providers will be saved in the database and can be configured via the adminpanel.\nThese providers - the leading social networks - offer an OAuth platform to developers and we use the plugin from\nThePHPLeague, maintained on Github, to offer a safe platform to communicate through.  Providers can be added, remove, enabled and disabled through the adminpanel. You can also disable the social login\nvia the site settings page.  Almost al providers allow you to upload an application icon. This will not be explained separately for each provider \nas that would be redundant.  Creating a new social provider is easy: Click on OAuth providers in adminpanel and then Add to see this form:   So you see it is very easy to add anything in there. Currently the system relies on a provider with First letter Capitalized.\nYour input will be automatically converted to this format so you don't have to worry about this.  \n      The value of the oauth name field matters: it needs to correspond to the name of the library class in \n     application/libraries/Oauth(1 or 2)/ . Just use the file name, it's identical.  \n      When you switch to https you need to change this in all the developer consoles. Https is going to get more\n    and more preference so it's important to start using one now. We have free SSL in our hosting packages.  \n      All providers have  rate limits  which can be found in\n    their respective API consoles. Some providers offer solutions to these limits, each in their own way.",
            "title": "Setting the providers"
        },
        {
            "location": "/social_login/#step-by-step-guides",
            "text": "Each provider has a different developer platform where OAuth needs to be configured. Some are easier than others\nbut all are subject to constant change. The manual might contain outdated images from time to time in between updates.  \n    Wherever you encounter a usage of /dev/cim3/ in an example: this is my development folder. You don't need to use\n    it it just serves as an example because I'm using screen captures from there.",
            "title": "Step-by-step guides"
        },
        {
            "location": "/social_login/#facebook",
            "text": "Go to the Facebook developer website and log in. \n     At the right top go to My apps and click  Add A New App  or click the green button that\n    tells you the same. \n     Create an initial app with display name and contact email. Choose a category that suits best. Click on\n    Create App ID and confirm the security code.\n        \n     Now click on Get Started next to FaceBook login (first in the list). \n     \n        On the settings page we enter the  Valid OAuth redirect URIs: \n        use your domain (plus subfolders if any) with  auth/oauth2/verify/Facebook \n        \n     \n        In the menu go to  Settings - Basic . Here we will find the app ID and secret which we need to use\n        to create a new provider in our adminpanel.\n     \n     \n        Click on Show and copy the secret, then go to adminpanel - OAuth Providers and add a new social login option\n        as explained above.\n     \n     \n        We continue with the App Domains: to be sure just put in both domains with and without www.\n     \n     \n        Click on Add Platform and choose Website - I add just the root domain here and it seems to work fine.\n        To  make your app available  go to App Review in the menu and set it to live here.",
            "title": "Facebook"
        },
        {
            "location": "/social_login/#google",
            "text": "You can also find an alternative explanation  on the google website .  \n     Go to  Google Developer Console \n     Click the dropdown and select Create a new project. Choose a name for the project. \n     Click on Credentials in the menu en choose \"Create Credentials\" then select Oauth Client ID from the dropdown. \n    The following screen appears:      \n     Choose a required name; \n     Add the correct return url with yourdomain and then  auth/oauth2/verify/Google  as path. \n     You will be asked to fill out the Consent screen:    \n     When finished a popup will appear with the credential data. You can also consult this data by \n    clicking on Credentials in the left menu and then selecting your project.",
            "title": "Google"
        },
        {
            "location": "/social_login/#twitter",
            "text": "Go to  Application Management  and click on Create New App. \n     Fill out the details:    \n     We arrive at the Details page where there's some data available from this app. \n     Consumer Key (API Key) and Consumer Secret (API Secret) can be grabbed from the Keys and Access Tokens page.",
            "title": "Twitter"
        },
        {
            "location": "/social_login/#github",
            "text": "Go to  Your Github Profile . \n     Enable your email address. \n     Click on OAuth applications in the left column down below. \n     Register a new application. \n     Fill out the details like always. \n     Once finished you will immediately see the tokens to add to the adminpanel provider section.",
            "title": "Github"
        },
        {
            "location": "/social_login/#linkedin",
            "text": "Go to  LinkedIn developer console . \n     Click Create Application. Linkedin requires some more information then others with a required\n    business email and phone number and also a logo. \n     Repeat the same steps from above but use the correct OAuth link: I think by now we get it but here it\n    is anyway:  https://example.com/auth/oauth2/verify/LinkedIn . \n     Your keys can be found on the Authentication page. Check the  r_emailaddress  box there now. \n     Set the app to live in Settings.",
            "title": "LinkedIn"
        },
        {
            "location": "/social_login/#microsoft",
            "text": "Go to  Your applications . \n     Click on Add An App, choose a name for your project. \n     You are immediately presented with your Application Id:    \n     Generate a new password for this Application ID and copy it into CIMembership. \n     Click on Add Platform and add the correct redirect URL as shown above. \n     You are immediately presented with your Application Id.",
            "title": "Microsoft"
        },
        {
            "location": "/social_login/#paypal",
            "text": "Go to  Paypal Developer and log in . \n     Paypal has an excellent manual where we can easily get lost because it's so vast. It's nice to have but\n    it's also a bit annoying. We want the \"Log In With PayPal\" option and it can be found after clicking \n    Dashboard at the top right of the screen. There could be regional differences. \n     We need to create new REST API credentials so click on that and choose an app name. \n     Now you will get client secret and id - grab them now and add a new provider via adminpanel.    \n     You can toggle between live and sandbox and the keys will be different. I use live for the demo and sandbox for my dev box. \n     You can manage both sandbox and live in one account so that is a big plus. Thanks, Paypal. If you are going\n    live turn off the sandbox setting in the library. (application/libraries/Oauth1 or OAuth2). It is off by default though.",
            "title": "Paypal"
        },
        {
            "location": "/social_login/#stripe",
            "text": "Is a little different - their member control panel is complex. \n     Go to  The dashboard  - if you are asked to initialize a few\n    things just go ahead. \n     Click on your name at the right top and choose Account Settings:    \n     Go to API Key to know your app secret for both test and live. \n     Stripe also offers us the possibility to manage both test and live environments in one application. \n     Go to Connect - Platform Settings and do the necessary as always. You will find your client_id here.",
            "title": "Stripe"
        },
        {
            "location": "/social_login/#development-vs-production",
            "text": "You are probably going to set all this up two times when you need a permanent development environment like I do.\nYou can try to add multiple URLs and it will work for some providers but I prefer to keep them separate because the development\nenvironment needs to remain private. With Facebook you can disable live access to your apps but not all providers\nhave this option.",
            "title": "Development vs Production"
        },
        {
            "location": "/social_login/#other",
            "text": "More providers will be added in the next version: VK, Microsoft, Steam, etc. will be tested thoroughly before\nmaking it public.",
            "title": "Other"
        },
        {
            "location": "/roles_permissions/",
            "text": "Role and Permissions\n\n\n\nWhat are roles?\n\n\nRoles are member access profiles which are used to hook permissions on to. So a role is a collection of permissions. Roles are applied to members - permissions are not.\n\n\nWhat are permissions?\n\n\nPermissions are individual control types for sections of the website. For example we can allow or disallow access to the List members page or the settings page. Once a permission is hooked to a role this permission becomes available for all members who have received that role.\n\n\nPermissions have an order: this is only used on the roles controller page to show the permissions in the order that you want.\n\n\nHow do we use them?\n\n\nThere are 2 static methods defined in core/Site_Controller.php:\n\n\n\n\ncheck_roles\n\n\ncheck_permissions\n\n\n\n\nChecking permissions\n\n\nExplaining this works best by example: \nadminpanel/list_members\n LINE 26:\n\n\nif (! self::check_permissions(1)) {\n    redirect(\"/private/no_access\");\n}\n\n\n\nWe feed the permission ID to the check_permissions method; we could also pass an array through:\n\n\nif (! self::check_permissions(3, 6, 9)) {\n    redirect(\"/private/no_access\");\n}\n\n\n\nThe permission ID can be found on adminpanel/permissions. Note that you can't delete system permissions because they are\nrequired for the inner workings of this script. You can add custom permissions for example when you create extra pages where\nspecial ACL rules are needed. Then you create a new permission specific to your page, maybe even connected to a new role\nfor this section you just added.\n\n\nEach method inside our adminpanel controller files is protected by this kind of permissions check, each with its own \nspecific permission code. We also use them in the constructor to protect a whole class in one go when each method needs the\nsame permissions anyway.\n\n\nChecking roles\n\n\nThe Check_roles method is more powerful because we can limit access based on a whole access profile:\nconsider core/Admin_Controller.php LINE 10 as an example: \n\n\nif ( ! self::check_roles(array(1,2,3))) { // catch-all for extra protection on role level\n   redirect(\"/private/no_access\");\n}\n\n\n\nWe block every role that does not have administrator privileges. We can easily create more complex setups with this\nprinciple: separate realms for specific teams or customer groups.\n\n\nMenu\n\n\nThe Sidemenu also uses roles to show more or less options. For regular members there is no Adminpanel section \navailable for example.\n\n\nFuture ideas\n\n\nAdding groups to roles based on module setup, making it easier to configure complex access control lists for sites\nwith many extra modules.",
            "title": "Roles and Permissions"
        },
        {
            "location": "/roles_permissions/#what-are-roles",
            "text": "Roles are member access profiles which are used to hook permissions on to. So a role is a collection of permissions. Roles are applied to members - permissions are not.",
            "title": "What are roles?"
        },
        {
            "location": "/roles_permissions/#what-are-permissions",
            "text": "Permissions are individual control types for sections of the website. For example we can allow or disallow access to the List members page or the settings page. Once a permission is hooked to a role this permission becomes available for all members who have received that role.  Permissions have an order: this is only used on the roles controller page to show the permissions in the order that you want.",
            "title": "What are permissions?"
        },
        {
            "location": "/roles_permissions/#how-do-we-use-them",
            "text": "There are 2 static methods defined in core/Site_Controller.php:   check_roles  check_permissions",
            "title": "How do we use them?"
        },
        {
            "location": "/roles_permissions/#checking-permissions",
            "text": "Explaining this works best by example:  adminpanel/list_members  LINE 26:  if (! self::check_permissions(1)) {\n    redirect(\"/private/no_access\");\n}  We feed the permission ID to the check_permissions method; we could also pass an array through:  if (! self::check_permissions(3, 6, 9)) {\n    redirect(\"/private/no_access\");\n}  The permission ID can be found on adminpanel/permissions. Note that you can't delete system permissions because they are\nrequired for the inner workings of this script. You can add custom permissions for example when you create extra pages where\nspecial ACL rules are needed. Then you create a new permission specific to your page, maybe even connected to a new role\nfor this section you just added.  Each method inside our adminpanel controller files is protected by this kind of permissions check, each with its own \nspecific permission code. We also use them in the constructor to protect a whole class in one go when each method needs the\nsame permissions anyway.",
            "title": "Checking permissions"
        },
        {
            "location": "/roles_permissions/#checking-roles",
            "text": "The Check_roles method is more powerful because we can limit access based on a whole access profile:\nconsider core/Admin_Controller.php LINE 10 as an example:   if ( ! self::check_roles(array(1,2,3))) { // catch-all for extra protection on role level\n   redirect(\"/private/no_access\");\n}  We block every role that does not have administrator privileges. We can easily create more complex setups with this\nprinciple: separate realms for specific teams or customer groups.",
            "title": "Checking roles"
        },
        {
            "location": "/roles_permissions/#menu",
            "text": "The Sidemenu also uses roles to show more or less options. For regular members there is no Adminpanel section \navailable for example.",
            "title": "Menu"
        },
        {
            "location": "/roles_permissions/#future-ideas",
            "text": "Adding groups to roles based on module setup, making it easier to configure complex access control lists for sites\nwith many extra modules.",
            "title": "Future ideas"
        },
        {
            "location": "/coding_tips/",
            "text": "Coding tips\n\n\n\n(this section will be expanded with more ideas)\n\n\nI want to edit/change this controller, view, model, etc\n\n\nWhen we want to expand the default code we need to hold into account that future updates might mess up our changes.\nThe general rule is to copy the code you want to modify and circumvent default references and routes to this copy.\n\n\nThe best way to proceed is to copy the module and create routes to this new module from the default locations.\n\n\nExample:\n\nSuppose I want to override the registration form. We can work with clumsy core controllers or we can just work from a copy. This way \nwe won't miss out on future updates in the default module.\n\n- we copy the whole folder \napplication/modules/auth\n to \napplication/modules/auth_copy\n\n\n\n- set some routes to our copy with \n$route['register'] = 'auth_copy/register'\n, optionally create a separate config file for custom routes,\nthose will override default routes and won't mess with future updates.\n\n\n\nManaging persistent session data\n\n\nWhen you need to keep track of changing data that needs to be persistent over a long period of time session data is used.\n\n\n\nFor example the username is stored as persistent data because it is used on many different places on the website and is also used\nto check things behind the scenes.\n\n\nConfig.php has some settings for sessions, look for the section \"Session Variables\"\n\n\nThese session variables are available to you at login:\n\n- \nuser_id\n: the id of the member who is currently logged in. Can be used to update user-specific data for example;\n\n\n- \nusername\n: as we need to display this often enough we added it to the session;\n\n\n- \nprofile_img\n: the file name of the profile image.\n\n\nLogin model\n\n\nIt is advised to expand the user table and add new fields used for session data there. You can also add an extra table\nand work with a join if you don't want to tamper with the default CIMembership tables.\n\n\nThe \nlogin model\n \napplication/modules/auth/models/Login_model.php\n contains the main query to extract data from the user and therefore this is the query\nwhere new session data should be added. \n\n\nSince CIMembership version 3.2.1 the \nvalidate_login()\n method is called by all login mechanisms, be it regular or OAuth.\n\n\nSo first we edit the query inside this method, adding the newly created database table fields into our select statement.\n\n\nSession helper\n\n\nThe session_helper function \nsession_init()\n does the actual session data creation and is fed data from the login model.\nWhen you fields in the user table the login model will pass these on to the validation system which calls \nset_session_data()\n. This function\nwill set session data one by one with a hard-coded array: \nthis array needs to be modified if you want to add persistent session data\n. \n\n\nWe also have \ncreate_member_oauth()\n for our social registration which is explained below.\n\n\nSocial registration\n\n\nDuring registration via OAuth (social login) we must immediately add some session data because after registering the user immediately has access\nto the system.\n This is not the case for normal registration as we only create an account here and the login does not occur yet.\n\n\nThe file \napplication/modules/auth/models/Oauth_model.php\n contains a method called \ncreate_member_oauth()\n that takes care of\ncreating a new account when using social networks.\n\nIf we want extra data to be returned from this method\nfor session data we need to add an extra query to grab this data after doing the actual registration. There is a commented example available inside this method.\n\n\n[todo: add working example]\n\n\nDatabase\n\n\nWe use the DB_PREFIX constant to take care of the prefix chosen during setup (can be empty). If you want to maintain this way of working please\nadd this to all your database queries - for examples just look at some model files from existing modules.\n\n\n[todo: add more info on ...? TBD]\n\n\nCustom libraries and vendor code\n\n\nThere's an extension on the default form validation called MY_Form_validation and can be found in \napplication/libraries\n.\n\n\nWe also make use of a caching lib, a customized template library, have our own image uploading library and use a separate recaptcha one, too. \nFor OAuth we created some small libraries in combination with the PHPLeague vendor files: these libraries make our lives easier by\nhandling all the exchanges between this third-party script. Each OAuth library does some provider-specific work when required.\n\n\nYou can definitely add custom libraries the usual CodeIgniter way but sometimes we need to do something different. The vendor package for\nOAuth is a perfect example as it is compiled with composer outside of the project and we need to use a require to tap into the script\ndirectly.\n\nOn the one hand we use a library \n$this->load->library('OAuth2/'. $provider);\n to deal with the loading of provider-specific data,\nthen we connect to the script itself for doing the verification by requiring \nrequire APPPATH . 'vendor/PHPLeague-OAuth2/autoload.php';\n.\n\nWe used libraries here to deal\nwith dynamic stuff: we load the corresponding library for the the provider based on the provider name requested, we use an abstract class \nabstract class OAuth2_Abstract\n to act as a\nsort of template to do the same type of request for different providers. All our provider libraries extend this abstract class and \noverride the \nsetProvider()\n method.\n\n\nSo you see you can include any code you want and don't have to turn everything into a CodeIgniter library.\n\n\nCreating modules\n\n\nFirst of all read the rather limited docs from \nWiredesignz HMVC\n.\n\n\nThe best advice I can give you is: have a look at how the current modules are built up. The home module is very easy and can be used\nas a starting point for other modules. Just code like you are used to with CodeIgniter but with added flexibility of HMVC.\n\n\nThere's not really a good in-depth tutorial unfortunately.",
            "title": "Coding tips"
        },
        {
            "location": "/coding_tips/#i-want-to-editchange-this-controller-view-model-etc",
            "text": "When we want to expand the default code we need to hold into account that future updates might mess up our changes.\nThe general rule is to copy the code you want to modify and circumvent default references and routes to this copy.  The best way to proceed is to copy the module and create routes to this new module from the default locations.  Example: \nSuppose I want to override the registration form. We can work with clumsy core controllers or we can just work from a copy. This way \nwe won't miss out on future updates in the default module. \n- we copy the whole folder  application/modules/auth  to  application/modules/auth_copy  \n- set some routes to our copy with  $route['register'] = 'auth_copy/register' , optionally create a separate config file for custom routes,\nthose will override default routes and won't mess with future updates.",
            "title": "I want to edit/change this controller, view, model, etc"
        },
        {
            "location": "/coding_tips/#managing-persistent-session-data",
            "text": "When you need to keep track of changing data that needs to be persistent over a long period of time session data is used.  \nFor example the username is stored as persistent data because it is used on many different places on the website and is also used\nto check things behind the scenes.  Config.php has some settings for sessions, look for the section \"Session Variables\"  These session variables are available to you at login: \n-  user_id : the id of the member who is currently logged in. Can be used to update user-specific data for example; \n-  username : as we need to display this often enough we added it to the session; \n-  profile_img : the file name of the profile image.",
            "title": "Managing persistent session data"
        },
        {
            "location": "/coding_tips/#login-model",
            "text": "It is advised to expand the user table and add new fields used for session data there. You can also add an extra table\nand work with a join if you don't want to tamper with the default CIMembership tables. \nThe  login model   application/modules/auth/models/Login_model.php  contains the main query to extract data from the user and therefore this is the query\nwhere new session data should be added.   Since CIMembership version 3.2.1 the  validate_login()  method is called by all login mechanisms, be it regular or OAuth.  So first we edit the query inside this method, adding the newly created database table fields into our select statement.",
            "title": "Login model"
        },
        {
            "location": "/coding_tips/#session-helper",
            "text": "The session_helper function  session_init()  does the actual session data creation and is fed data from the login model.\nWhen you fields in the user table the login model will pass these on to the validation system which calls  set_session_data() . This function\nwill set session data one by one with a hard-coded array:  this array needs to be modified if you want to add persistent session data .   We also have  create_member_oauth()  for our social registration which is explained below.",
            "title": "Session helper"
        },
        {
            "location": "/coding_tips/#social-registration",
            "text": "During registration via OAuth (social login) we must immediately add some session data because after registering the user immediately has access\nto the system.  This is not the case for normal registration as we only create an account here and the login does not occur yet. \nThe file  application/modules/auth/models/Oauth_model.php  contains a method called  create_member_oauth()  that takes care of\ncreating a new account when using social networks. \nIf we want extra data to be returned from this method\nfor session data we need to add an extra query to grab this data after doing the actual registration. There is a commented example available inside this method.  [todo: add working example]",
            "title": "Social registration"
        },
        {
            "location": "/coding_tips/#database",
            "text": "We use the DB_PREFIX constant to take care of the prefix chosen during setup (can be empty). If you want to maintain this way of working please\nadd this to all your database queries - for examples just look at some model files from existing modules.  [todo: add more info on ...? TBD]",
            "title": "Database"
        },
        {
            "location": "/coding_tips/#custom-libraries-and-vendor-code",
            "text": "There's an extension on the default form validation called MY_Form_validation and can be found in  application/libraries .  We also make use of a caching lib, a customized template library, have our own image uploading library and use a separate recaptcha one, too. \nFor OAuth we created some small libraries in combination with the PHPLeague vendor files: these libraries make our lives easier by\nhandling all the exchanges between this third-party script. Each OAuth library does some provider-specific work when required.  You can definitely add custom libraries the usual CodeIgniter way but sometimes we need to do something different. The vendor package for\nOAuth is a perfect example as it is compiled with composer outside of the project and we need to use a require to tap into the script\ndirectly. \nOn the one hand we use a library  $this->load->library('OAuth2/'. $provider);  to deal with the loading of provider-specific data,\nthen we connect to the script itself for doing the verification by requiring  require APPPATH . 'vendor/PHPLeague-OAuth2/autoload.php'; . We used libraries here to deal\nwith dynamic stuff: we load the corresponding library for the the provider based on the provider name requested, we use an abstract class  abstract class OAuth2_Abstract  to act as a\nsort of template to do the same type of request for different providers. All our provider libraries extend this abstract class and \noverride the  setProvider()  method. \nSo you see you can include any code you want and don't have to turn everything into a CodeIgniter library.",
            "title": "Custom libraries and vendor code"
        },
        {
            "location": "/coding_tips/#creating-modules",
            "text": "First of all read the rather limited docs from  Wiredesignz HMVC .  The best advice I can give you is: have a look at how the current modules are built up. The home module is very easy and can be used\nas a starting point for other modules. Just code like you are used to with CodeIgniter but with added flexibility of HMVC.  There's not really a good in-depth tutorial unfortunately.",
            "title": "Creating modules"
        },
        {
            "location": "/theming_layouts/",
            "text": "Theming and Layouts\n\n\n\nThe default controller\n\n\nHome\n\n\nThis controller is set in \napplication/config/routes.php\n\nCheck out line 52 where\n$route['default_controller'] = 'home';\n determines this.\n\nDefault controllers pick up when you call a module without calling a controller like example.com/adminpanel.\n\n\nCustom 404 page\n\n\nWe can also find this setting in routes.php LINE 53: \n$route['404_override'] = 'utils/page_not_found';\n\n\nKeeping it DRY\n\n\nApplication/core overview:\n\n\n\n\nMY_Controller: the first parent, everything is derived from this core controller. Contains theming methods.\n\n\nSite_Controller: extends MY_Controller and adds roles and permission methods that can be used anywhere in the application.\n\n\nPrivate_Controller: extends Site_Controller and adds login verification so that only logged in users can view these pages;\n\n\nAuth_Controller: extends Site_Controller and is only used for public controllers where we need to redirect \n  members who are logged in to avoid them having access to authentication forms.\n\n\nAdmin_Controller: extends the Private_Controller and loads the admin-specific language file;\n\n\nAjax_Controller: used when the whole controller is AJAX-only - in the constructor we check for AJAX with \n$this->input->is_ajax_request()\n.\n\n\n\n\n\n\nWe extend our controllers from any of these core controllers depending on what we need. This is the first question to \nask ourselves when writing new code: do we want this page to be public or private? Additionally, do we need new roles and permissions, \nis this an adminpanel page? We can even add more core controllers, \nyou can add a new core controller for your module\n for example and\nextend all your module controllers from this new custom core controller. You can then add shared code and methods to your core controller to avoid duplicate code. Will be handy for larger projects.\n\n\nBootstrap, LESS and Compiling\n\n\nHow is Bootstrap hooked into this? We have a less folder that is not part of the ci_membership package. \nBootstrap's default code can be found here \nless/adminpanel/vendor/bootstrap3.3.x\n and the overrides for this\ntheme are in \nless/adminpanel/bootstrap\n. We then use the bootstrap.less file found here to keep track\nof our imports. Notice at the bottom of this file we import our own code. This is the file you need to compile. \n\n\nI use Winless, here is a visual example:\n\n\n\n\nWinless auto-compiles, meaning as soon as you tab away from your project view and your project is selected inside winless, it will compile.\nIt might not always do this, but it does work most of the time.\n\n\nWhen you add your own less files you can (but don't have to) refresh the Winless folder and untick the newly added files.\n\n\nWe could also use Grunt or Gulp and make a listener for our changes via command line which I would highly advise\nyou to do as it saves so much time. We won't go into detail here - for all those node users, check out https://github.com/gruntjs/grunt-contrib-less\nwhich I'm sure you already know.\n\n\nAn excellent example of how to do this specifically for Bootstrap is to \ncheck out this simple grunt tutorial\n.\nOnce Bootstrap 4 is out we're going to have to switch to this type of setup anyway because it's much more practical to use in stead of having to\ninstall something like Winless.\n\n\nSome IDEs like PHPStorm allow you to incorporate a transpiler into your software:\n\n\nhttps://www.jetbrains.com/help/phpstorm/2016.3/transpiling-sass-less-and-scss-to-css.html#d405088e199\n\n\nFor all you guys new to command line: the basics of getting started with composer, grunt\nand node are easy - it just takes some dedicated time without any distraction to get that lightbulb moment.\nOnce you get up and running you won't look back.\n\n\nManaging Layouts\n\n\nThemes:\n \napplication/views/themes/\n\nThese are the HTML5 pages that act as containers for our dynamic parts of the application. Partials will be loaded into these files.\nThis is the core of the theme, this file is loaded first in our template method quick_page_setup(). See below.\n\n\nWhat layout to choose?\n\n\n\n\nadminpanel is for the backend\n\n\nbootstrap3 is for public pages\n\n\n\n\nChoose wisely: the headers and footers of each theme differ and serve a specific purpose. Check out the existing code\nand use them as examples.\n\n\nSo for example the auth module uses bootstrap3 as $theme because it is part of the front-end. The profile uses the adminpanel \nbecause it is part of the backend. \nFor views this isn't as important - you can easily override the default view theme with another one to grab view\nfiles from another theme. This allows us to quickly override certain parts of the website.\n\n\nGeneric files:\n some of the views are still stored in application/views/themes/ because these are used at more then one\nlocation and do not belong to a single module.\n\n\nModules:\n the module-specific views are found in \napplication/modules/[module_name]/views\n.\n\n\nquick_page_setup()\n\n\n\nOur Template library takes care of loading views dynamically allowing for way more flexibility\nthen the standard CodeIgniter behaviour. You can load views from other themes, you can create a custom folder in views \nand load those views in any controller for your module. Use the \n$overriding_theme\n explained below\nto grab from another theme.\n\n\nBelow is the method responsible for setting up pages quickly in a controller. This method lives in \n\napplication/core/MY_Controller.php\n making it accessible to all controllers.\n\n\npublic function quick_page_setup($theme, $layout, $page_title, $path, $header, $footer, $overriding_theme = \"\", $data = array()) {\n\n   if (empty($overriding_theme)) {\n       $overriding_theme = $theme;\n   }\n\n   $this->template->set_theme($theme);\n   $this->template->set_layout($layout);\n   $this->template->title($page_title);\n   $this->_process_partial('header', $theme, 'partials/'. $header);\n   $this->_process_partial('footer', $theme, 'partials/'. $footer);\n\n   if (!empty($data)) {\n       $this->_process_template_build($overriding_theme, $path, $data);\n   }else{\n       $this->_process_template_build($overriding_theme, $path);\n   }\n\n}\n\n\n\n\n\n$theme:\n set the active theme, usually this will be Settings_model::$db_config['active_theme'] for non-adminpanel pages and Settings_model::$db_config['adminpanel_theme'] for adminpanel pages. These can be found in Site settings in the admin panel.\nThe default theme for Settings_model::$db_config['active_theme'] = bootstrap3;\nThe default theme for Settings_model::$db_config['adminpanel_theme'] = adminpanel.\nThese must reflect a folder inside application/views/themes; you can add your own theme by creating a new folder here. \n\n\n$layout:\n choose your layout, for example 'main' or 'adminpanel' - this must reside in views/themes/[themename]/layouts/\n\n\n$page_title:\n will appear in browser window as page name\n\n\n$path:\n path to the actual view file inside this module folder\n\n\n$header, $footer:\n names of the partials used for these purposes\n\n\n$viewTheme:\n in case you need a custom theme; it's an alternate folder location for views if you need some from other themes - omit or leave on '' if not needed\n\n\n$data:\n array of data passed to view (optional, omit if not needed)\n\n\n\n\nI am using \nmodules/membership/controllers/Home.php\n as an example. In our controller we call this method with:\n\n\npublic function index() {\n   $this->quick_page_setup(Settings_model::$db_config['adminpanel_theme'],\n       'adminpanel', // theme\n       $this->lang->line('home_title'), // page title\n       'home',  // view name\n       'header', // partial\n       'footer', // partial\n       Settings_model::$db_config['active_theme'] // overriding theme for partials only (optional)\n   );\n}\n\n\n\nPassing data will be done by passing an array to the method at the end:\n\n\npublic function index() {\n   $this->quick_page_setup(Settings_model::$db_config['adminpanel_theme'],\n       'adminpanel', // theme\n       $this->lang->line('home_title'), // page title\n       'home',  // view name\n       'header', // partial\n       'footer', // partial\n       Settings_model::$db_config['active_theme'], // overriding theme\n       $content_data // array of data to pass to the view\n   );\n}\n\n\n\nLoading Custom Data With set_css() and set_js()\n\n\nIn our index() method belinging to our controller we can also quickload CSS and JS files with our template engine:\n\n\n\n\nuse set_css() for CSS\n\n\nset_js() for JavaScript files\n\n\n\n\nThese are loaded in the header and footer for each theme (adminpanel and bootstrap3). Here is an example from our\npassword generator files:\n\n\n$this->template->set_js('widget', base_url() .'assets/vendor/jquery/jquery.ui.widget.js');\n$this->template->set_js('upload', base_url() .'assets/vendor/fileupload/jquery.fileupload.js');\n\n$this->template->set_js('big-min', base_url() .'assets/vendor/diceware/components/big.min.js');\n$this->template->set_js('special-min', base_url() .'assets/vendor/diceware/lists/special-min.js');\n$this->template->set_js('diceware-min', base_url() .'assets/vendor/diceware/lists/diceware-min.js');\n$this->template->set_js('eff', base_url() .'assets/vendor/diceware/lists/eff.js');\n$this->template->set_js('password-gen', base_url() .'assets/vendor/diceware/password_generator.js');\n\n\n\nAs you can see we need to feed these methods a unique name for each line because we're adding it to an array behind the scenes.\n\n\nSetting metadata\n\n\nYou can easily generate metadata in de index() of a controller with this Template method:\n\n\npublic function set_metadata($name, $content, $type = 'meta') {}\n\n\nWhere the third argument can also be \"link\".\n\n\nWe use it like this:\n\n\n$this->template->set_metadata('description', $this->lang->line('add_member'));\n in an index() so where\nyou also load a template.\n\n\nIn the theme file (application/views/themes/[themname]/layouts) meta data is called with:\n\n\n<?php print $template['metadata']; ?>\n\n\nCreating A Custom Theme\n\n\nIt takes some time to get used to but once you get the hang of it you will see that this system offers great flexibility.\nYou can for example use custom layouts for each page with the quick_page_setup() method.\n\n\nA. Front-end\n\n\nFirst we choose a new active theme name for our custom design: let's use the name newtheme for this example.\n\n\nNow we \ncopy the vital view folders\n so that we can use the copied views to modify the markup:\n\n\n- for the home page I copy \nmodules/home/views/themes/bootstrap3\n to \nmodules/home/views/themes/newtheme\n\n\n\n- for auth I copy \nmodules/auth/views/themes/bootstrap3\n to \nmodules/auth/views/themes/newtheme\n\n\n\n- for utils I copy \nmodules/utils/views/themes/bootstrap3\n to \nmodules/utils/views/themes/newtheme\n\n\n\n- For theme files: copy \nviews/themes/bootstrap3\n to \nviews/themes/newtheme\n\n\nWe need a new css file in assets/css/newtheme/bootstrap.min.css (use the one from your design here or compile with LESS).\n\n\nOptional: create a folder assets/img/newtheme and store your theme images here.\n\n\nThis allows us to change our active theme in \n/adminpanel/dashboard\n:\nlook for \"Currently active theme\" and change it to newtheme - save your settings.\n\n\nNow you are working on your own theme, no more need to mess with default files.\n\n\nA. Back-end\n\n\nSame deal: choose a new name for your adminpanel theme and copy the view folders to this new name:\n\n\n- We copy over the theme views folder \nmodules/adminpanel/views/themes/adminpanel\n \n\n\n- Make a copy of \nmodules/membership/views/themes/adminpanel\n \n\n\n- For theme files: copy \nviews/themes/adminpanel\n to your new folder namein the same destination.\n\n\nCreate a new theme folder with a css file in assets/css just like the ones already there (copy).\n\n\nNow we change the adminpanel theme in site settings and work on the new theme can start.\n\n\nOff course the adminpanel design is more complex and depends on more tools like a menu, a file upload script and many more. \n\n\nIn the less folder we have an adminpanel folder - you can copy it and use it in your compilation.\n\n\nQuick Tips:\n\n\n\n- If you want to change a controller that might get overwritten you can opt to copy it and set a route to your copied controller to avoid changing default files.\nFor example you can create a controller modules/home/controllers/Start.php and add a route from home to start, effectively overriding the home page.\n\n\n- More interesting when having to edit CIMembership files is to copy the whole module and work from there. You will effectively make your own\nfork of the code and will have to either drop future changes to CIM or add them manually later. If your clients require you\nto heavily modify the code than this is your best bet. When you only need light features consider requesting them to be added to the default code.\n\n\n- assets: cs, js and such can be stored in several ways: we opted for a vendor folder for JS while CSS will be handled by a LESS compiler.",
            "title": "Theming and layouts"
        },
        {
            "location": "/theming_layouts/#the-default-controller",
            "text": "Home  This controller is set in  application/config/routes.php \nCheck out line 52 where $route['default_controller'] = 'home';  determines this. \nDefault controllers pick up when you call a module without calling a controller like example.com/adminpanel.",
            "title": "The default controller"
        },
        {
            "location": "/theming_layouts/#custom-404-page",
            "text": "We can also find this setting in routes.php LINE 53:  $route['404_override'] = 'utils/page_not_found';",
            "title": "Custom 404 page"
        },
        {
            "location": "/theming_layouts/#keeping-it-dry",
            "text": "Application/core overview:   MY_Controller: the first parent, everything is derived from this core controller. Contains theming methods.  Site_Controller: extends MY_Controller and adds roles and permission methods that can be used anywhere in the application.  Private_Controller: extends Site_Controller and adds login verification so that only logged in users can view these pages;  Auth_Controller: extends Site_Controller and is only used for public controllers where we need to redirect \n  members who are logged in to avoid them having access to authentication forms.  Admin_Controller: extends the Private_Controller and loads the admin-specific language file;  Ajax_Controller: used when the whole controller is AJAX-only - in the constructor we check for AJAX with  $this->input->is_ajax_request() .    We extend our controllers from any of these core controllers depending on what we need. This is the first question to \nask ourselves when writing new code: do we want this page to be public or private? Additionally, do we need new roles and permissions, \nis this an adminpanel page? We can even add more core controllers,  you can add a new core controller for your module  for example and\nextend all your module controllers from this new custom core controller. You can then add shared code and methods to your core controller to avoid duplicate code. Will be handy for larger projects.",
            "title": "Keeping it DRY"
        },
        {
            "location": "/theming_layouts/#bootstrap-less-and-compiling",
            "text": "How is Bootstrap hooked into this? We have a less folder that is not part of the ci_membership package. \nBootstrap's default code can be found here  less/adminpanel/vendor/bootstrap3.3.x  and the overrides for this\ntheme are in  less/adminpanel/bootstrap . We then use the bootstrap.less file found here to keep track\nof our imports. Notice at the bottom of this file we import our own code. This is the file you need to compile.   I use Winless, here is a visual example:   Winless auto-compiles, meaning as soon as you tab away from your project view and your project is selected inside winless, it will compile.\nIt might not always do this, but it does work most of the time.  When you add your own less files you can (but don't have to) refresh the Winless folder and untick the newly added files.  We could also use Grunt or Gulp and make a listener for our changes via command line which I would highly advise\nyou to do as it saves so much time. We won't go into detail here - for all those node users, check out https://github.com/gruntjs/grunt-contrib-less\nwhich I'm sure you already know.  An excellent example of how to do this specifically for Bootstrap is to  check out this simple grunt tutorial .\nOnce Bootstrap 4 is out we're going to have to switch to this type of setup anyway because it's much more practical to use in stead of having to\ninstall something like Winless.  Some IDEs like PHPStorm allow you to incorporate a transpiler into your software:  https://www.jetbrains.com/help/phpstorm/2016.3/transpiling-sass-less-and-scss-to-css.html#d405088e199  For all you guys new to command line: the basics of getting started with composer, grunt\nand node are easy - it just takes some dedicated time without any distraction to get that lightbulb moment.\nOnce you get up and running you won't look back.",
            "title": "Bootstrap, LESS and Compiling"
        },
        {
            "location": "/theming_layouts/#managing-layouts",
            "text": "Themes:   application/views/themes/ \nThese are the HTML5 pages that act as containers for our dynamic parts of the application. Partials will be loaded into these files.\nThis is the core of the theme, this file is loaded first in our template method quick_page_setup(). See below.  What layout to choose?   adminpanel is for the backend  bootstrap3 is for public pages   Choose wisely: the headers and footers of each theme differ and serve a specific purpose. Check out the existing code\nand use them as examples.  So for example the auth module uses bootstrap3 as $theme because it is part of the front-end. The profile uses the adminpanel \nbecause it is part of the backend. \nFor views this isn't as important - you can easily override the default view theme with another one to grab view\nfiles from another theme. This allows us to quickly override certain parts of the website.  Generic files:  some of the views are still stored in application/views/themes/ because these are used at more then one\nlocation and do not belong to a single module.  Modules:  the module-specific views are found in  application/modules/[module_name]/views .",
            "title": "Managing Layouts"
        },
        {
            "location": "/theming_layouts/#loading-custom-data-with-set_css-and-set_js",
            "text": "In our index() method belinging to our controller we can also quickload CSS and JS files with our template engine:   use set_css() for CSS  set_js() for JavaScript files   These are loaded in the header and footer for each theme (adminpanel and bootstrap3). Here is an example from our\npassword generator files:  $this->template->set_js('widget', base_url() .'assets/vendor/jquery/jquery.ui.widget.js');\n$this->template->set_js('upload', base_url() .'assets/vendor/fileupload/jquery.fileupload.js');\n\n$this->template->set_js('big-min', base_url() .'assets/vendor/diceware/components/big.min.js');\n$this->template->set_js('special-min', base_url() .'assets/vendor/diceware/lists/special-min.js');\n$this->template->set_js('diceware-min', base_url() .'assets/vendor/diceware/lists/diceware-min.js');\n$this->template->set_js('eff', base_url() .'assets/vendor/diceware/lists/eff.js');\n$this->template->set_js('password-gen', base_url() .'assets/vendor/diceware/password_generator.js');  As you can see we need to feed these methods a unique name for each line because we're adding it to an array behind the scenes.",
            "title": "Loading Custom Data With set_css() and set_js()"
        },
        {
            "location": "/theming_layouts/#setting-metadata",
            "text": "You can easily generate metadata in de index() of a controller with this Template method:  public function set_metadata($name, $content, $type = 'meta') {}  Where the third argument can also be \"link\".  We use it like this:  $this->template->set_metadata('description', $this->lang->line('add_member'));  in an index() so where\nyou also load a template.  In the theme file (application/views/themes/[themname]/layouts) meta data is called with:  <?php print $template['metadata']; ?>",
            "title": "Setting metadata"
        },
        {
            "location": "/theming_layouts/#creating-a-custom-theme",
            "text": "It takes some time to get used to but once you get the hang of it you will see that this system offers great flexibility.\nYou can for example use custom layouts for each page with the quick_page_setup() method.",
            "title": "Creating A Custom Theme"
        },
        {
            "location": "/theming_layouts/#a-front-end",
            "text": "First we choose a new active theme name for our custom design: let's use the name newtheme for this example. \nNow we  copy the vital view folders  so that we can use the copied views to modify the markup: \n- for the home page I copy  modules/home/views/themes/bootstrap3  to  modules/home/views/themes/newtheme  \n- for auth I copy  modules/auth/views/themes/bootstrap3  to  modules/auth/views/themes/newtheme  \n- for utils I copy  modules/utils/views/themes/bootstrap3  to  modules/utils/views/themes/newtheme  \n- For theme files: copy  views/themes/bootstrap3  to  views/themes/newtheme  We need a new css file in assets/css/newtheme/bootstrap.min.css (use the one from your design here or compile with LESS).  Optional: create a folder assets/img/newtheme and store your theme images here.  This allows us to change our active theme in  /adminpanel/dashboard :\nlook for \"Currently active theme\" and change it to newtheme - save your settings.  Now you are working on your own theme, no more need to mess with default files.",
            "title": "A. Front-end"
        },
        {
            "location": "/theming_layouts/#a-back-end",
            "text": "Same deal: choose a new name for your adminpanel theme and copy the view folders to this new name: \n- We copy over the theme views folder  modules/adminpanel/views/themes/adminpanel   \n- Make a copy of  modules/membership/views/themes/adminpanel   \n- For theme files: copy  views/themes/adminpanel  to your new folder namein the same destination.  Create a new theme folder with a css file in assets/css just like the ones already there (copy).  Now we change the adminpanel theme in site settings and work on the new theme can start.  Off course the adminpanel design is more complex and depends on more tools like a menu, a file upload script and many more.   In the less folder we have an adminpanel folder - you can copy it and use it in your compilation.  Quick Tips:  \n- If you want to change a controller that might get overwritten you can opt to copy it and set a route to your copied controller to avoid changing default files.\nFor example you can create a controller modules/home/controllers/Start.php and add a route from home to start, effectively overriding the home page. \n- More interesting when having to edit CIMembership files is to copy the whole module and work from there. You will effectively make your own\nfork of the code and will have to either drop future changes to CIM or add them manually later. If your clients require you\nto heavily modify the code than this is your best bet. When you only need light features consider requesting them to be added to the default code. \n- assets: cs, js and such can be stored in several ways: we opted for a vendor folder for JS while CSS will be handled by a LESS compiler.",
            "title": "A. Back-end"
        }
    ]
}